{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onSelectHandler","selectedUserId","useState","title","setTitle","filterByStaus","setFilterByStatus","filteredTodos","filter","todo","toLowerCase","includes","completed","className","type","placeholder","value","onChange","event","target","map","cn","readOnly","checked","userId","onClick","id","request","url","fetch","then","response","ok","Error","status","statusText","json","getTodos","a","result","getUser","CurrentUser","currentUser","setCurrentUser","selectUser","useCallback","selectedUser","useEffect","name","email","phone","App","setSelectedUserId","setTodos","loadTodos","loadedTodos","selectHandler","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a3c87f06.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './TodoList.scss';\nimport cn from 'classnames';\n\ninterface Props {\n  todos: Todo[];\n  selectedUserId: number;\n  onSelectHandler: (userId: number) => void;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSelectHandler,\n  selectedUserId,\n}) => {\n  const [title, setTitle] = useState('');\n  const [filterByStaus, setFilterByStatus] = useState('all');\n\n  let filteredTodos = todos.filter(todo => (\n    todo.title.toLowerCase().includes(title.toLowerCase())\n  ));\n\n  if (filterByStaus !== 'all') {\n    filteredTodos = filterByStaus === 'completed'\n      ? filteredTodos.filter(todo => todo.completed)\n      : filteredTodos.filter(todo => !todo.completed);\n  }\n\n  return (\n    <div className=\"TodoList\">\n      <h2 className=\"title\">Todos</h2>\n\n      <input\n        type=\"text\"\n        data-cy=\"filterByTitle\"\n        placeholder=\"search by title\"\n        value={title}\n        onChange={(event) => (\n          setTitle(event.target.value)\n        )}\n      />\n\n      <select\n        value={filterByStaus}\n        onChange={(event) => (\n          setFilterByStatus(event.target.value)\n        )}\n      >\n        <option value=\"all\">All</option>\n        <option value=\"active\">Not Completed</option>\n        <option value=\"completed\">Completed</option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={cn(\n                'TodoList__item',\n                { 'TodoList__item--unchecked': !todo.completed },\n                { 'TodoList__item--checked': todo.completed },\n              )}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n              <button\n                className={cn(\n                  'TodoList__user-button',\n                  'button',\n                  {\n                    'TodoList__user-button--selected':\n                  selectedUserId === todo.userId,\n                  },\n                )}\n                type=\"button\"\n                data-cy=\"userButton\"\n                onClick={() => onSelectHandler(todo.userId)}\n              >\n\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getTodos = async () => {\n  const result = await request('/todos');\n\n  return result;\n};\n\nexport const getUser = async (userId: number) => {\n  const result = await request(`/users/${userId}`);\n\n  return result;\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number;\n  onSelectHandler: (userId: number) => void;\n}\n\nexport const CurrentUser: React.FC<Props> = ({\n  userId,\n  onSelectHandler,\n}) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n\n  const selectUser = useCallback(\n    async (id: number) => {\n      try {\n        const selectedUser = await getUser(id);\n\n        if (selectedUser.id) {\n          setCurrentUser(selectedUser);\n        }\n      } catch {\n        setCurrentUser(null);\n      }\n    }, [userId],\n  );\n\n  useEffect(() => {\n    selectUser(userId);\n\n    return () => setCurrentUser(null); // to clean up previous selected user before new selected user\n  },\n  [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${currentUser?.id}`}</span></h2>\n\n      <h3 className=\"CurrentUser__name\">{currentUser?.name}</h3>\n      <p className=\"CurrentUser__email\">{currentUser?.email}</p>\n      <p className=\"CurrentUser__phone\">{currentUser?.phone}</p>\n\n      <button\n        type=\"button\"\n        className=\"button\"\n        onClick={() => onSelectHandler(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport 'bulma';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const loadTodos = useCallback(\n    async () => {\n      const loadedTodos = await getTodos();\n\n      setTodos(loadedTodos);\n    },\n    [],\n  );\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  const selectHandler = useCallback(\n    (userId: number) => {\n      setSelectedUserId(userId);\n    },\n    [],\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectedUserId={selectedUserId}\n          onSelectHandler={selectHandler}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              onSelectHandler={selectHandler}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}