{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onSelectHandler","useState","title","setTitle","filterByStaus","setFilterByStatus","filteredTodos","filter","todo","toLowerCase","includes","completed","className","type","placeholder","value","onChange","event","target","map","cn","checked","onClick","userId","id","request","url","fetch","then","response","ok","Error","status","statusText","json","getTodos","a","result","getUsers","CurrentUser","currentUser","setCurrentUser","selectUser","selectedUser","useEffect","name","email","phone","App","selectedUserId","setSelectedUserId","setTodos","loadTodos","loadedTodos","selectHandler","ReactDOM","render","document","getElementById"],"mappings":"gVASaA,EAA4B,SAAC,GAGnC,IAFLC,EAEI,EAFJA,MACAC,EACI,EADJA,gBAEA,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA2CF,mBAAS,OAApD,mBAAOG,EAAP,KAAsBC,EAAtB,KAEIC,EAAgBP,EAAMQ,QAAO,SAAAC,GAAI,OACnCA,EAAKN,MAAMO,cAAcC,SAASR,EAAMO,kBAS1C,MANsB,QAAlBL,IACFE,EAAkC,cAAlBF,EACZE,EAAcC,QAAO,SAAAC,GAAI,OAAIA,EAAKG,aAClCL,EAAcC,QAAO,SAAAC,GAAI,OAAKA,EAAKG,cAIvC,sBAAKC,UAAU,WAAf,UACE,oBAAIA,UAAU,QAAd,mBAEA,uBACEC,KAAK,OACL,UAAQ,gBACRC,YAAY,kBACZC,MAAOb,EACPc,SAAU,SAACC,GAAD,OACRd,EAASc,EAAMC,OAAOH,UAI1B,yBACEA,MAAOX,EACPY,SAAU,SAACC,GAAD,OACRZ,EAAkBY,EAAMC,OAAOH,QAHnC,UAME,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,2BACA,wBAAQA,MAAM,YAAd,0BAGF,qBAAKH,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACGN,EAAca,KAAI,SAAAX,GAAI,OACrB,qBAEEI,UAAWQ,IACT,iBACA,CAAE,6BAA8BZ,EAAKG,WACrC,CAAE,0BAA2BH,EAAKG,YALtC,UAQGH,EAAKG,UAEF,kCACE,uBAAOE,KAAK,WAAWQ,SAAO,IAC9B,4BAAIb,EAAKN,WAIX,kCACE,uBAAOW,KAAK,aACZ,4BAAIL,EAAKN,WAIf,wBACEW,KAAK,SACLD,UAAU,iEAKV,UAAQ,aACRU,QAAS,kBAAMtB,EAAgBQ,EAAKe,SARtC,yBAWYf,EAAKe,YAhCZf,EAAKgB,eCrDXC,EAAU,SAACC,GACtB,OAAOC,MAAM,GAAD,OAHG,qCAGH,OAAeD,IACxBE,MAAK,SAACC,GACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAGnD,OAAOJ,EAASK,WAITC,EAAQ,uCAAG,4BAAAC,EAAA,sEACDX,EAAQ,UADP,cAChBY,EADgB,yBAGfA,GAHe,2CAAH,qDAMRC,EAAQ,uCAAG,WAAOf,GAAP,eAAAa,EAAA,sEACDX,EAAQ,UAAD,OAAWF,IADjB,cAChBc,EADgB,yBAGfA,GAHe,2CAAH,sDCVRE,G,MAA+B,SAAC,GAGtC,IAFLhB,EAEI,EAFJA,OACAvB,EACI,EADJA,gBAEA,EAAsCC,qBAAtC,mBAAOuC,EAAP,KAAoBC,EAApB,KAEMC,EAAU,uCAAG,4BAAAN,EAAA,sEACUE,EAASf,GADnB,OACXoB,EADW,OAGjBF,EAAeE,GAHE,2CAAH,qDAUhB,OAJAC,qBAAU,WACRF,MACC,CAACnB,IAGF,sBAAKX,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SAAmC,wDAAyBW,OAE5D,oBAAIX,UAAU,oBAAd,gBAAmC4B,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAaK,OAChD,mBAAGjC,UAAU,qBAAb,gBAAmC4B,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAaM,QAChD,mBAAGlC,UAAU,qBAAb,gBAAmC4B,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAaO,QAEhD,wBACElC,KAAK,SACLD,UAAU,SACVU,QAAS,kBAAMtB,EAAgB,IAHjC,wBCmBSgD,G,MA5CO,WACpB,MAGI/C,mBAAS,GAHb,mBACEgD,EADF,KAEEC,EAFF,KAIA,EAA0BjD,mBAAiB,IAA3C,mBAAOF,EAAP,KAAcoD,EAAd,KAEMC,EAAS,uCAAG,4BAAAhB,EAAA,sEACUD,IADV,OACVkB,EADU,OAGhBF,EAASE,GAHO,2CAAH,qDAMfT,qBAAU,WACRQ,MACC,IAEH,IAAME,EAAgB,SAAC/B,GACrB2B,EAAkB3B,IAGpB,OACE,sBAAKX,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEb,MAAOA,EACPC,gBAAiBsD,MAIrB,qBAAK1C,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGqC,EACC,cAAC,EAAD,CACE1B,OAAQ0B,EACRjD,gBAAiBsD,IAEjB,4BC1CdC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.40448809.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './TodoList.scss';\nimport cn from 'classnames';\n\ninterface Props {\n  todos: Todo[];\n  onSelectHandler: (userId: number) => void;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSelectHandler,\n}) => {\n  const [title, setTitle] = useState('');\n  const [filterByStaus, setFilterByStatus] = useState('all');\n\n  let filteredTodos = todos.filter(todo => (\n    todo.title.toLowerCase().includes(title.toLowerCase())\n  ));\n\n  if (filterByStaus !== 'all') {\n    filteredTodos = filterByStaus === 'completed'\n      ? filteredTodos.filter(todo => todo.completed)\n      : filteredTodos.filter(todo => !todo.completed);\n  }\n\n  return (\n    <div className=\"TodoList\">\n      <h2 className=\"title\">Todos</h2>\n\n      <input\n        type=\"text\"\n        data-cy=\"filterByTitle\"\n        placeholder=\"search by title\"\n        value={title}\n        onChange={(event) => (\n          setTitle(event.target.value)\n        )}\n      />\n\n      <select\n        value={filterByStaus}\n        onChange={(event) => (\n          setFilterByStatus(event.target.value)\n        )}\n      >\n        <option value=\"all\">All</option>\n        <option value=\"active\">Not Completed</option>\n        <option value=\"completed\">Completed</option>\n      </select>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={cn(\n                'TodoList__item',\n                { 'TodoList__item--unchecked': !todo.completed },\n                { 'TodoList__item--checked': todo.completed },\n              )}\n            >\n              {todo.completed\n                ? (\n                  <label>\n                    <input type=\"checkbox\" checked />\n                    <p>{todo.title}</p>\n                  </label>\n                )\n                : (\n                  <label>\n                    <input type=\"checkbox\" />\n                    <p>{todo.title}</p>\n                  </label>\n                )}\n\n              <button\n                type=\"button\"\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                data-cy=\"userButton\"\n                onClick={() => onSelectHandler(todo.userId)}\n              >\n\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getTodos = async () => {\n  const result = await request('/todos');\n\n  return result;\n};\n\nexport const getUsers = async (userId: number) => {\n  const result = await request(`/users/${userId}`);\n\n  return result;\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUsers } from '../../api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  userId: number;\n  onSelectHandler: (userId: number) => void;\n}\n\nexport const CurrentUser: React.FC<Props> = ({\n  userId,\n  onSelectHandler,\n}) => {\n  const [currentUser, setCurrentUser] = useState<User | undefined>();\n\n  const selectUser = async () => {\n    const selectedUser = await getUsers(userId);\n\n    setCurrentUser(selectedUser);\n  };\n\n  useEffect(() => {\n    selectUser();\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${userId}`}</span></h2>\n\n      <h3 className=\"CurrentUser__name\">{currentUser?.name}</h3>\n      <p className=\"CurrentUser__email\">{currentUser?.email}</p>\n      <p className=\"CurrentUser__phone\">{currentUser?.phone}</p>\n\n      <button\n        type=\"button\"\n        className=\"button\"\n        onClick={() => onSelectHandler(0)}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport 'bulma';\nimport { getTodos } from './api';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const loadTodos = async () => {\n    const loadedTodos = await getTodos();\n\n    setTodos(loadedTodos);\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  const selectHandler = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          onSelectHandler={selectHandler}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              onSelectHandler={selectHandler}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}